name: WAIED Build

on: [push, pull_request]

# env:
#   CMAKE_VERSION: 3.16.2
#   NINJA_VERSION: 1.9.0
#   BUILD_TYPE: Release
#   CCACHE_VERSION: 3.7.7

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows Latest MSVC",
              artifact: "Windows-MSVC.tar.xz",
              os: windows-2019,
              cc: "cl",
              cxx: "cl",
              compiler: "Visual Studio",
              environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            }
          - {
              name: "Ubuntu Latest GCC",
              os: ubuntu-20.04,
              compiler: "gcc",
              cc: "gcc",
              cxx: "g++",
            }

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          submodules: 'recursive'

      - name: env
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
          sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y software-properties-common sudo gcc-9 g++-9 build-essential perl python python3 python3-pip git make cmake libfontconfig1-dev libxcb1-dev libx11-dev libc6-dev libgl1-mesa-dev '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev xcb-proto xorg-dev wget fuse
          sudo apt-get -y build-dep qt5-default

      - name: env
        if: runner.os == 'Windows'
        shell: cmd
        run: call "${{ matrix.config.environment_script }}"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip --version

      - name: Install conan
        run: |
          python -m pip install -U conan
          python -m pip show conan

      - name: Setup conan
        run: |
          conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
          conan remote add myremote "${{ secrets.CONAN_SERVER }}" --insert
          conan user -p "${{ secrets.CONAN_PASS }}" -r myremote "${{ secrets.CONAN_USER }}"
          conan profile new default --detect
          conan profile update settings.compiler=${{ matrix.config.compiler }} default
          conan remote list

      - name: Setup conan libstdc++11
        if: runner.os == 'Linux'
        run: conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Build conan packages
        run: |
          conan remove "openssl/*"
          conan install --update --settings build_type=Release --generator cmake --build=missing --build=outdated --build cascade .

      - name: Upload compiled conan packages
        run: |
          conan upload "*" --all --confirm -r=myremote

      - name: Build WAIED
        run: |
          cmake . -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_INSTALL_PREFIX:STRING=install
          cmake --build . --target waied
          cmake --build . --target install
          ls -lah install

      - name: ldd
        run: |
          ldd install/bin/waied
