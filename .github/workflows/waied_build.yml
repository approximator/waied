name: WAIED Build

on: [push, pull_request]

jobs:
  build:
    name: "${{ matrix.os }}. Conan: ${{ matrix.use_conan }}. Build ${{ matrix.build }}. Static ${{ matrix.static }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        use_conan:
          - 'ON'
          - 'OFF'
        build:
          - Release
          - Debug
        static:
          - 'ON'
          - 'OFF'
        os:
          - ubuntu-20.04
          - windows-2019
        compiler_version:
          - 9
          - 16
        compiler:
          - gcc
          - Visual Studio

        exclude:
          - use_conan: 'ON'
            build: Debug
          - use_conan: 'OFF'
            static: 'ON'
          - use_conan: 'OFF'
            os: 'windows-2019'
          - use_conan: 'ON'
            static: 'OFF'
          - compiler: gcc
            compiler_version: 16
          - compiler: Visual Studio
            compiler_version: 9
          - compiler: gcc
            os: windows-2019
          - compiler: Visual Studio
            os: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          submodules: 'recursive'

      - name: Env
        if: runner.os == 'Windows'
        shell: cmd
        run: call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

      - name: Install packages
        if: runner.os == 'Linux'
        run: |
          sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
          sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y software-properties-common sudo gcc-9 g++-9 build-essential perl python python3 python3-pip git make cmake libfontconfig1-dev libxcb1-dev libx11-dev libc6-dev libgl1-mesa-dev '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev xcb-proto xorg-dev wget fuse qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev qtquickcontrols2-5-dev
          sudo apt-get -y build-dep qt5-default

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip --version

      - name: Setup conan
        if: ${{ matrix.use_conan == 'ON' }}
        run: |
          python -m pip install -U conan
          python -m pip show conan
          conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan --insert 1
          conan remote add myremote "${{ secrets.CONAN_SERVER }}" --insert 1
          conan user -p "${{ secrets.CONAN_PASS }}" -r myremote "${{ secrets.CONAN_USER }}"
          conan profile new default --detect
          conan profile update settings.compiler="${{ matrix.compiler }}" default
          conan profile update settings.compiler.version="${{ matrix.compiler_version }}" default
          conan remote list
          conan remove "openssl/*"
          conan remove "OpenSSL/*"
          conan remove "libcurl/*"

      - name: Run cmake
        run: cmake . -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build }} -DCMAKE_INSTALL_PREFIX:STRING=install -DUSE_CONAN=${{ matrix.use_conan }} -DSTATIC_BUILD=${{ matrix.static }}

      - name: Upload compiled conan packages
        if: ${{ matrix.use_conan == 'ON' }}
        run: conan upload "*" --all --confirm -r=myremote

      - name: Build WAIED
        run: cmake --build . --target waied --config ${{ matrix.BUILD }}

      - name: Install
        run: cmake --build . --target install --config ${{ matrix.BUILD }}

      - name: ldd
        if: runner.os == 'Linux'
        run: |
          ls -lah install
          ls -lah install/bin
          ldd install/bin/waied
